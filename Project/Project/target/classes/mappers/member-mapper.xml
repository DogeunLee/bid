<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="memberMapper">

	<resultMap type="member" id="member_rm">
		<id property="memberNo" column="MEMBER_NO" />
		<result property="memberId" column="MEMBER_ID" />
		<result property="memberPw" column="MEMBER_PW" />
		<result property="memberName" column="MEMBER_NAME" />
		<result property="memberGender" column="MEMBER_GENDER" />
		<result property="memberTel" column="MEMBER_TEL" />
		<result property="memberBirth" column="MEMBER_BIRTH" />
		<result property="memberHire" column="MEMBER_HIRE" />
		<result property="memberSt" column="MEMBER_ST" />
		<result property="memberLv" column="MEMBER_LV" />
		<result property="memberAddr" column="MEMBER_ADDR" />
		<result property="memberImg" column="MEMBER_IMAGE" />
		<result property="memberEmail" column="MEMBER_EMAIL" />
		<result property="memberGrad" column="MEMBER_GRAD" />
	</resultMap>

	<resultMap type="graduate" id="graduate_rm">
		<id property="gradNo" column="GRAD_NO" />
		<result property="memberGrad" column="MEMBER_GRAD" />
		<result property="memberNo" column="MEMBER_NO" />
		<result property="gradName" column="GRAD_NAME" />
		<result property="gradValue" column="GRAD_VALUE" />
		<result property="gradHsDate" column="GRAD_HSDATE" />
		<result property="gradHeDate" column="GRAD_HEDATE" />
	</resultMap>

	<resultMap type="exp" id="exp_rm">
		<id property="expNo" column="EXP_NO" />
		<result property="memberNo" column="MEMBER_NO" />
		<result property="expName" column="EXP_NAME" />
		<result property="expDept" column="EXP_DEPT" />
		<result property="expSDate" column="EXP_SDATE" />
		<result property="expEDate" column="EXP_EDATE" />
	</resultMap>

	<resultMap type="certi" id="certi_rm">
		<id property="certiNo" column="CERTI_NO" />
		<result property="memberNo" column="MEMBER_NO" />
		<result property="certiName" column="CERTI_NAME" />
		<result property="certiDate" column="CERTI_DATE" />
	</resultMap>

	<resultMap type="member" id="complexmember">
		<id property="memberNo" column="MEMBER_NO" />
		<result property="memberId" column="MEMBER_ID" />
		<result property="memberPw" column="MEMBER_PW" />
		<result property="memberName" column="MEMBER_NAME" />
		<result property="memberGender" column="MEMBER_GENDER" />
		<result property="memberTel" column="MEMBER_TEL" />
		<result property="memberBirth" column="MEMBER_BIRTH" />
		<result property="memberHire" column="MEMBER_HIRE" />
		<result property="memberSt" column="MEMBER_ST" />
		<result property="memberLv" column="MEMBER_LV" />
		<result property="memberAddr" column="MEMBER_ADDR" />
		<result property="memberImg" column="MEMBER_IMAGE" />
		<result property="memberEmail" column="MEMBER_EMAIL" />
		<result property="memberGrad" column="MEMBER_GRAD" />
		<association property="graduate"
			javaType="com.bid.board.member.model.vo.Graduate"
			resultMap="graduate_rm" />
		<association property="exp"
			javaType="com.bid.board.member.model.vo.Exp" resultMap="exp_rm" />
	</resultMap>
	
	<resultMap type="reserve" id="reserve_rm">
		<id property="reserveNo" column="RESERVE_NO" />
		<result property="projectNo" column="PROJECT_NO" />
		<result property="memberId" column="MEMBER_ID" />
	</resultMap>
	

	<select id="selectMemberNo" resultType="_int">
		SELECT COUNT(*) FROM
		MEMBER
	</select>

	<select id="countSearchMemberList1" resultType="_int">
		SELECT COUNT(*) FROM
		MEMBER
		WHERE 1=1
		<if test="memberSt != null and memberSt.trim() != ''">
			AND MEMBER_ST = #{memberSt}
		</if>
		<if test="memberGender != null and memberGender.trim() != ''">
			AND MEMBER_GENDER = #{memberGender}
		</if>
		<if test="memberLv != null and memberLv.trim() != ''">
			AND MEMBER_LV = #{memberLv}
		</if>
		<if test="memberName != null and memberName.trim() != ''">
			AND (UPPER(MEMBER_NAME) LIKE '%' || UPPER(#{memberName})
			|| '%')
		</if>
		<if test="startDate != null and startDate.trim() != ''">
			AND MEMBER_HIRE <![CDATA[ >= ]]>
			TO_DATE(#{startDate}, 'YYYY-MM-DD')
		</if>
		<if test="endDate != null and endDate.trim() != ''">
			AND MEMBER_HIRE <![CDATA[ <= ]]>
			TO_DATE(#{endDate}, 'YYYY-MM-DD')
		</if>
	</select>

	<select id="countSearchMemberList2" resultType="_int">
		SELECT COUNT(*) FROM
		MEMBER
		<where>
			<if test="memberName == null or memberName.trim() == ''">
				<choose>
					<when test="codeNo == 1">
					</when>
					<when test="codeNo == 10">
						MEMBER_ST = #{codeId}
					</when>
					<when test="codeNo == 11">
						MEMBER_GENDER = #{codeId}
					</when>
					<when test="codeNo == 20">
						MEMBER_LV = #{codeId}
					</when>
				</choose>
			</if>
			<if test="memberName != null and memberName.trim() != ''">
				(UPPER(MEMBER_NAME) LIKE '%' || UPPER(#{memberName}) ||
				'%')
			</if>
		</where>
	</select>

	<select id="login" parameterType="member" resultMap="member_rm">
		SELECT *
		FROM MEMBER
		WHERE MEMBER_ID = #{memberId}
	</select>

	<select id="getMemberList" resultMap="member_rm">
		SELECT
		m.MEMBER_NO,
		m.MEMBER_ID,
		m.MEMBER_NAME,
		m.MEMBER_BIRTH,
		m2.CODE_NAME AS
		MEMBER_GENDER,
		m3.CODE_NAME AS MEMBER_LV,
		m.MEMBER_TEL,
		m.MEMBER_EMAIL ,
		m.MEMBER_ADDR,
		m1.CODE_NAME AS MEMBER_GRAD,
		m4.CODE_NAME AS MEMBER_ST,
		TO_CHAR(m.MEMBER_HIRE, 'YYYY-MM-DD') AS MEMBER_HIRE
		FROM MEMBER m
		LEFT
		JOIN MASTER_CODETBL m1 ON m.MEMBER_GRAD = m1.CODE_ID
		LEFT JOIN
		MASTER_CODETBL m2 ON m.MEMBER_GENDER = m2.CODE_ID
		LEFT JOIN
		MASTER_CODETBL m3 ON m.MEMBER_LV = m3.CODE_ID
		LEFT JOIN MASTER_CODETBL
		m4 ON m.MEMBER_ST = m4.CODE_ID
		LEFT JOIN GRADUATE gr ON gr.MEMBER_NO =
		m.MEMBER_NO
		WHERE
		m.MEMBER_ST != 'STAT03'
		AND
		m.MEMBER_ST != 'STAT04'
		ORDER BY m.MEMBER_NO ASC
	</select>

	<select id="memberIdDupCheck" parameterType="string"
		resultType="_int">
		SELECT COUNT(*) FROM MEMBER
		WHERE MEMBER_ID = #{memberId}
		AND (MEMBER_ST = 'STAT01' OR MEMBER_ST = 'STAT02' OR MEMBER_ST =
		'STAT04')
	</select>

	<select id="telDupCheck" parameterType="string"
		resultType="_int">
		SELECT COUNT(*) FROM MEMBER
		WHERE MEMBER_TEL = #{memberTel}
		AND (MEMBER_ST = 'STAT01' OR MEMBER_ST = 'STAT02' OR MEMBER_ST =
		'STAT04')
	</select>

	<select id="emailDupCheck" parameterType="string"
		resultType="_int">
		SELECT COUNT(*) FROM MEMBER
		WHERE MEMBER_EMAIL =
		#{memberEmail}
		AND (MEMBER_ST = 'STAT01' OR MEMBER_ST = 'STAT02' OR
		MEMBER_ST =
		'STAT04')
	</select>

	<insert id="signUp" parameterType="member">
		INSERT INTO MEMBER VALUES(
		MEMBER_SEQ.NEXTVAL,
		#{memberId},
		#{memberPw},
		#{memberName},
		#{memberGender},
		#{memberTel},
		#{memberBirth},
		#{memberHire},
		DEFAULT,
		#{memberLv},
		#{memberAddr},
		DEFAULT,
		#{memberEmail},
		#{memberGrad}
		)
	</insert>

	<select id="selectNewMemberNo" resultType="_int">
		SELECT MAX(MEMBER_NO)
		FROM MEMBER
	</select>

	<insert id="setGarduateInfo" parameterType="graduate">
		INSERT INTO GRADUATE
		(
		GRAD_NO,
		MEMBER_NO,
		GRAD_NAME,
		GRAD_VALUE,
		GRAD_HSDATE,
		GRAD_HEDATE,
		MEMBER_GRAD
		)
		VALUES(
		GRADUATE_SEQ.NEXTVAL,
		#{memberNo},
		#{gradName},
		#{gradValue},
		#{gradHsDate},
		#{gradHeDate},
		#{memberGrad}
		)
	</insert>

	<insert id="getExpInfo" parameterType="exp">
		INSERT INTO EXP
		(
		EXP_NO,
		MEMBER_NO,
		EXP_NAME,
		EXP_DEPT,
		EXP_SDATE,
		EXP_EDATE
		)
		VALUES(
		EXP_SEQ.NEXTVAL,
		#{memberNo},
		#{expName},
		#{expDept},
		#{expSDate},
		#{expEDate}
		)
	</insert>

	<insert id="setCertiInfo" parameterType="certi">
		INSERT INTO CERTI
		(
		CERTI_NO,
		MEMBER_NO,
		CERTI_NAME,
		CERTI_DATE
		)
		VALUES(
		CERTI_SEQ.NEXTVAL,
		#{memberNo},
		#{certiName},
		#{certiDate}
		)
	</insert>

	<select id="searchFormMemberList" resultMap="member_rm">
		SELECT
		m.MEMBER_NO,
		m.MEMBER_ID,
		m.MEMBER_NAME,
		m.MEMBER_BIRTH,
		m2.CODE_NAME AS
		MEMBER_GENDER,
		m3.CODE_NAME AS MEMBER_LV,
		m.MEMBER_TEL,
		m.MEMBER_EMAIL,
		m.MEMBER_ADDR,
		m1.CODE_NAME AS MEMBER_GRAD,
		m4.CODE_NAME
		AS MEMBER_ST,
		TO_CHAR(m.MEMBER_HIRE, 'YYYY-MM-DD') AS MEMBER_HIRE
		FROM
		MEMBER m
		LEFT
		JOIN MASTER_CODETBL m1 ON m.MEMBER_GRAD = m1.CODE_ID
		LEFT
		JOIN
		MASTER_CODETBL m2 ON m.MEMBER_GENDER = m2.CODE_ID
		LEFT JOIN
		MASTER_CODETBL m3 ON m.MEMBER_LV = m3.CODE_ID
		LEFT JOIN MASTER_CODETBL
		m4 ON m.MEMBER_ST = m4.CODE_ID
		LEFT JOIN GRADUATE gr ON gr.MEMBER_NO =
		m.MEMBER_NO
		<where>
			<if test="memberName == null or memberName.trim() == ''">
				<choose>
					<when test="codeNo == 1">
						m.MEMBER_ST != 'STAT03' AND m.MEMBER_ST != 'STAT04'
					</when>
					<when test="codeNo == 10">
						m.MEMBER_ST = #{codeId} ORDER BY m.MEMBER_NO ASC
					</when>
					<when test="codeNo == 11">
						m.MEMBER_GENDER = #{codeId} AND m.MEMBER_ST !=
						'STAT03' AND m.MEMBER_ST != 'STAT04' ORDER BY m.MEMBER_NO
						ASC
					</when>
					<when test="codeNo == 20">
						m.MEMBER_LV = #{codeId} AND m.MEMBER_ST != 'STAT03'
						m.MEMBER_ST != 'STAT04' ORDER BY m.MEMBER_NO ASC
					</when>
				</choose>
			</if>
			<if test="memberName != null and memberName.trim() != ''">
				(UPPER(m.MEMBER_NAME) LIKE '%' || UPPER(#{memberName}) ||
				'%') ORDER BY m.MEMBER_NO ASC
			</if>
		</where>
	</select>

	<select id="searchSelectList" resultMap="member_rm">
		SELECT
		m.MEMBER_NO,
		m.MEMBER_ID,
		m.MEMBER_NAME,
		m.MEMBER_BIRTH,
		m2.CODE_NAME AS MEMBER_GENDER,
		m3.CODE_NAME AS MEMBER_LV,
		m.MEMBER_TEL,
		m.MEMBER_EMAIL,
		m.MEMBER_ADDR,
		m1.CODE_NAME AS MEMBER_GRAD,
		m4.CODE_NAME
		AS MEMBER_ST,
		TO_CHAR(m.MEMBER_HIRE, 'YYYY-MM-DD') AS MEMBER_HIRE
		FROM
		MEMBER m
		LEFT JOIN MASTER_CODETBL m1 ON m.MEMBER_GRAD = m1.CODE_ID
		LEFT
		JOIN MASTER_CODETBL m2 ON m.MEMBER_GENDER = m2.CODE_ID
		LEFT JOIN
		MASTER_CODETBL m3 ON m.MEMBER_LV = m3.CODE_ID
		LEFT JOIN MASTER_CODETBL
		m4 ON m.MEMBER_ST = m4.CODE_ID
		LEFT JOIN GRADUATE gr ON gr.MEMBER_NO =
		m.MEMBER_NO
		WHERE 1=1
		<if test="memberSt != null and memberSt.trim() != ''">
			AND m.MEMBER_ST = #{memberSt}
		</if>
		<if test="memberGender != null and memberGender.trim() != ''">
			AND m.MEMBER_GENDER = #{memberGender}
		</if>
		<if test="memberLv != null and memberLv.trim() != ''">
			AND m.MEMBER_LV = #{memberLv}
		</if>
		<if test="memberName != null and memberName.trim() != ''">
			AND (UPPER(m.MEMBER_NAME) LIKE '%' || UPPER(#{memberName})
			|| '%')
		</if>
		<if test="startDate != null and startDate.trim() != ''">
			AND m.MEMBER_HIRE <![CDATA[ >= ]]>
			TO_DATE(#{startDate}, 'YYYY-MM-DD')
		</if>
		<if test="endDate != null and endDate.trim() != ''">
			AND m.MEMBER_HIRE <![CDATA[ <= ]]>
			TO_DATE(#{endDate}, 'YYYY-MM-DD')
		</if>
		ORDER BY m.MEMBER_NO ASC
	</select>

	<select id="getMemberInfo" resultMap="complexmember">
		SELECT
		m.MEMBER_NO,
		m.MEMBER_ID,
		m.MEMBER_NAME,
		m.MEMBER_BIRTH,
		m2.CODE_NAME AS
		MEMBER_GENDER,
		m3.CODE_NAME AS MEMBER_LV,
		m.MEMBER_TEL,
		m.MEMBER_EMAIL,
		m.MEMBER_ADDR,
		m1.CODE_NAME AS MEMBER_GRAD,
		m4.CODE_NAME AS MEMBER_ST,
		TO_CHAR(m.MEMBER_HIRE, 'YYYY-MM-DD') AS MEMBER_HIRE,
		gr.GRAD_NO,
		gr.GRAD_NAME,
		gr.GRAD_VALUE,
		TO_CHAR(gr.GRAD_HSDATE, 'YYYY-MM-DD') as
		GRAD_HSDATE,
		TO_CHAR(gr.GRAD_HEDATE, 'YYYY-MM-DD') as GRAD_HEDATE,
		e.EXP_NO,
		e.EXP_NAME,
		e.EXP_DEPT,
		TO_CHAR(e.EXP_SDATE, 'YYYY-MM-DD') as
		EXP_SDATE,
		TO_CHAR(e.EXP_EDATE, 'YYYY-MM-DD') as EXP_EDATE
		FROM MEMBER m
		LEFT JOIN
		MASTER_CODETBL m1 ON m.MEMBER_GRAD = m1.CODE_ID
		LEFT JOIN
		MASTER_CODETBL m2 ON m.MEMBER_GENDER = m2.CODE_ID
		LEFT JOIN
		MASTER_CODETBL m3 ON m.MEMBER_LV = m3.CODE_ID
		LEFT JOIN MASTER_CODETBL
		m4 ON m.MEMBER_ST = m4.CODE_ID
		LEFT JOIN GRADUATE gr ON m.MEMBER_NO =
		gr.MEMBER_NO
		LEFT
		JOIN EXP e ON m.MEMBER_NO = e.MEMBER_NO
		WHERE
		m.MEMBER_NO = #{memberNo}
	</select>

	<update id="updateInfos">
		UPDATE MEMBER SET
		MEMBER_NO = #{memberNo}
		<if test="memberGender != null and memberGender.trim() != ''">
			,MEMBER_GENDER = #{memberGender}
		</if>
		<if test="memberTel != null and memberTel.trim() != ''">
			,MEMBER_TEL = #{memberTel}
		</if>
		<if test="memberEmail != null and memberEmail.trim() != ''">
			,MEMBER_EMAIL = #{memberEmail}
		</if>
		<if test="memberHire != null and memberHire.trim() != ''">
			,MEMBER_HIRE = #{memberHire}
		</if>
		<if test="memberAddr != null and memberAddr.trim() != ''">
			,MEMBER_ADDR = #{memberAddr}
		</if>
		<if test="memberLv != null and memberLv.trim() != ''">
			,MEMBER_LV = #{memberLv}
		</if>
		<if test="memberGrad != null and memberGrad.trim() != ''">
			,MEMBER_GRAD = #{memberGrad}
		</if>
		<if test="memberSt != null and memberSt.trim() != ''">
			,MEMBER_ST = #{memberSt}
		</if>
		WHERE MEMBER_NO = #{memberNo}
	</update>

	<select id="checkCurrentPassword" resultType="int">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE MEMBER_NO = #{memberNo}
		AND MEMBER_PW = #{memberPw}
		AND
		(MEMBER_ST = 'STAT01' OR MEMBER_ST = 'STAT02' OR MEMBER_ST =
		'STAT04')
	</select>

	<update id="updateChangePw">
		UPDATE MEMBER SET
		MEMBER_PW = #{memberPw}
		WHERE
		MEMBER_NO = #{memberNo}
	</update>

	<select id="selectCerti" resultMap="certi_rm">
		SELECT
		CERTI_NO,
		MEMBER_NO,
		CERTI_NAME,
		TO_CHAR(CERTI_DATE, 'YYYY-MM-DD') AS CERTI_DATE
		FROM CERTI
		WHERE MEMBER_NO = #{memberNo}
		ORDER BY CERTI_NO ASC
	</select>

	<update id="updateGraduate">
		UPDATE GRADUATE SET
		GRAD_NAME = #{gradName},
		GRAD_VALUE = #{gradValue},
		GRAD_HSDATE = #{gradHsDate},
		GRAD_HEDATE =
		#{gradHeDate}
		WHERE
		GRAD_NO = #{gradNo}
	</update>

	<update id="updatExp">
		UPDATE EXP SET
		EXP_NAME = #{expName},
		EXP_DEPT =
		#{expDept},
		EXP_SDATE = #{expSDate},
		EXP_EDATE = #{expEDate}
		WHERE
		EXP_NO
		= #{expNo}
	</update>

	<update id="updateCerti">
		UPDATE CERTI SET
		CERTI_NAME = #{certiName},
		CERTI_DATE
		= #{certiDate}
		WHERE
		CERTI_NO = #{certiNo}
	</update>

	<insert id="insertCerti">
		INSERT INTO CERTI
		(
		CERTI_NO,
		MEMBER_NO,
		CERTI_NAME,
		CERTI_DATE
		)
		VALUES(
		CERTI_SEQ.NEXTVAL,
		#{memberNo},
		#{certiName},
		#{certiDate}
		)
	</insert>

	<update id="updateSt">
		UPDATE MEMBER SET
		MEMBER_ST = 'STAT02'
		WHERE
		MEMBER_ID IN
		<foreach collection="memberId" item="id" open="("
			separator="," close=")">
			#{id}
		</foreach> 
	</update>
	
	<select id="selectProjectMemberList" resultMap="member_rm">
		SELECT 
		m.MEMBER_ID,
		m.MEMBER_NAME,
		m1.CODE_NAME AS MEMBER_LV,
		m.MEMBER_TEL,
		m2.CODE_NAME AS MEMBER_GRAD
		FROM MEMBER m
		LEFT OUTER JOIN RESERVE r ON m.MEMBER_ID = r.MEMBER_ID
		LEFT OUTER JOIN MASTER_CODETBL m1 ON m.MEMBER_LV = m1.CODE_ID
		LEFT OUTER JOIN	MASTER_CODETBL m2 ON m.MEMBER_GRAD = m2.CODE_ID
		WHERE PROJECT_NO = #{projectNo}
	</select>
	
</mapper>